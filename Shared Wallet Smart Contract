//SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

import "./Allowance.sol";

//Breaks down into two smart contracts to make it easier to read.
contract SharedWallet is Allowance {


//Removing function to remove an owner 
function renounceOwnership() public view override onlyOwner {
    revert("can't renounceOwnership here");
//not possible with this smart contract 
}
event MoneySent(address indexed _beneficiary, uint _amount);
event MoneyReceived(address indexed _from, uint _amount);

//Withdraw money function while reducing the allowance on withdrawal.
//Without it someone can withdraw the same amount over and over.
    function withdrawMoney(address payable _to, uint _amount) public ownerOrAllowed(_amount) {
        require(_amount <= address(this).balance, "Contract doesn't own enough money");

//Reducing allowance on withdrawal to avoid double spend attack        
        if(!isOwner()) {
            reduceAllowance(msg.sender, _amount);
        }
        emit MoneySent(_to, _amount);
        _to.transfer(_amount);
    }

    receive() external payable {
        emit MoneyReceived(msg.sender, msg.value);

    }
}

